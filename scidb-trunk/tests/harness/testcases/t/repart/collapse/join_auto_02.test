# Test collapse of automatically inserted repartition/repart with
# explicitly given autochunked redimension/repart as input

# This set of tests uses the physical plan output to confirm that the
# explicitly specified repart/redimension which has autochunking is
# collapsed into a singular repart/redimension with the
# "auto-inserted" repart/redimension of the join operator (inserted by
# requiresRedimensionOrRepartition() in the PhysicalJoin operator).
#
# An explicit repart/redimension which has autochunking must have the
# same shape (startMin, chunkOverlap) that the join operator expects
# (which is defined by the auto-inserted repart/redimension).  The
# collapsed repart/redimension will populate the chunkInterval based upon
# the auto-inserted repart/redimension schema.
#
# Additionally tests to confirm failures when an explicitly given
# repart/redimension that are mismatched (startMin, endMax,
# chunkOverlap) with the "auto-inserted" (needed) repart/redimension
# schema fail with the expected Error Codes are given.

##
## The join operator uses the schema of the left-most NON-AUTOCHUNKED
## input.
##
##  The following tests the case where the explicit AUTOCHUNKED
##  repart/redimension is on the first input schema. In this case the
##  "needed" schema for the join is the right_array (<val:double>[i=0:9,3,2, j=0:15,5,3])


--setup
create TEMP array left_array  <val:double>[i=0:9,2,0, j=0:9,4,1]
create TEMP array right_array <val:double>[x=0:9,3,2, y=0:15,5,3]
--start-igdata
store(build(left_array,1),left_array)
store(build(right_array,0),right_array)
--stop-igdata

--test
--start-query-logging

# This repart matches all non-chunk interval portions of the schema, so the collapse occurs
## physical plan of join(repart(left_array,XXX), right_array)
###      (first autochunked):  join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,3]),right_array)
###      (second autochunked): join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,3]),right_array)
###      (both autochunked):   join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,3]),right_array)
--echo Physical Plan of collapsing redimension
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--igdata "store(join(left_array,right_array), L_R)"
--igdata "store(join(right_array,left_array), R_L)"
--igdata "store(join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,3]),right_array),rL_R)"
show(R_L)
show(L_R)
show(right_array)
show(rL_R)
#
# Vary the other aspects (startMin/endMax/chunkOverlap) of the dimensions in the explicit repart/redimension
#
##
## alter startMin --> all cases should error
##
### alter first dimension's startMin
###      (first autochunked):  join(redimension(left_array,<val:double>[i=1:9,*,2, j=0:15,5,3]),right_array)
###      (second autochunked): join(redimension(left_array,<val:double>[i=1:9,3,2, j=0:15,*,3]),right_array)
###      (both autochunked):   join(redimension(left_array,<val:double>[i=1:9,*,2, j=0:15,*,3]),right_array)
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,*,2, j=0:15,5,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,3,2, j=0:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,*,2, j=0:15,*,3]),right_array)"
### alter second dimension's startMin
###      (first autochunked):  join(redimension(left_array,<val:double>[i=0:9,*,2, j=1:15,5,3]),right_array)
###      (second autochunked): join(redimension(left_array,<val:double>[i=0:9,3,2, j=1:15,*,3]),right_array)
###      (both autochunked):   join(redimension(left_array,<val:double>[i=0:9,*,2, j=1:15,5,3]),right_array)
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=0:9,*,2, j=1:15,5,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=0:9,3,2, j=1:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=0:9,*,2, j=1:15,*,3]),right_array)"
### alter both dimension's startMin
###      (first autochunked):  join(redimension(left_array,<val:double>[i=1:9,*,2, j=1:15,5,3]),right_array)
###      (second autochunked): join(redimension(left_array,<val:double>[i=1:9,3,2, j=1:15,*,3]),right_array)
###      (both autochunked):   join(redimension(left_array,<val:double>[i=1:9,*,2, j=1:15,*,3]),right_array)
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,*,2, j=1:15,5,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,3,2, j=1:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_INFER_SCHEMA::SCIDB_LE_START_INDEX_MISMATCH "join(redimension(left_array,<val:double>[i=1:9,*,2, j=1:15,*,3]),right_array)"
##
## alter EndMax
##
### The endMax can be greater
###
### increase endMax for first dim
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:15,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:19,3,2, j=0:15,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:15,*,3]),right_array)
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:15,5,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,3,2, j=0:15,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:15,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
### increase endMax for second dim
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:24,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:9,3,2, j=0:24,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:24,*,3]),right_array)
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:24,5,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:9,3,2, j=0:24,5,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:24,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
### increase endMax for both dims
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:*,*,2, j=0:49,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:*,3,2, j=0:49,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:*,*,2, j=0:49,*,3]),right_array)
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:*,5,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,3,2, j=0:*,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
--shell --store-all --command "iquery -c $IQUERY_HOST -p $IQUERY_PORT -aq "_explain_physical('join(redimension(left_array,<val:double>[i=0:19,*,2, j=0:*,*,3]),right_array)','afl')" | sed -f ${TESTDIR}/fix_physplan.sed"
###
### Invalid EndMax (smaller than original array) ==> error
###
#### decrease the endMax of the first dimension
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:15,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:7,3,2, j=0:15,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:15,*,3]),right_array)
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:15,5,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,3,2, j=0:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:15,*,3]),right_array)"
#### decrease the endMax of the second dimension
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:12,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:9,3,2, j=0:12,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:12,*,3]),right_array)
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:7,5,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:9,3,2, j=0:7,*,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:9,*,2, j=0:7,*,3]),right_array)"
#### decrease the endMax of both the dimensions
####   (first autochunked) : join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:12,5,3]),right_array)
####   (second autochunked): join(redimension(left_array,<val:double>[i=0:7,3,2, j=0:12,*,3]),right_array)
####   (both autochunked)  : join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:12,*,3]),right_array)
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:8,5,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,3,2, j=0:8,*,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_INVALID_REDIMENSION_POSITION "join(redimension(left_array,<val:double>[i=0:7,*,2, j=0:8,*,3]),right_array)"

##
## alter overlap. The overlap of the explicit repart MUST be <=  the overlap of the exempalr schema (otherwise error)
### alter the overlap of the first dimension
### Note: right schema: <val:double>[i=0:9,3,2, j=0:15,5,3]
####   (first autochunked, overlap smaller) : join(repart(left_array,<val:double>[i=0:9,*,0, j=0:15,5,3]),right_array)
####   (second autochunked, overlap smaller): join(repart(left_array,<val:double>[i=0:9,3,0, j=0:15,*,3]),right_array)
####   (both autochunked, overlap smaller)  : join(repart(left_array,<val:double>[i=0:9,*,0, j=0:15,*,3]),right_array)
####   (first autochunked, overlap greater) : join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,5,3]),right_array)
####   (second autochunked, overlap greater): join(repart(left_array,<val:double>[i=0:9,3,3, j=0:15,*,3]),right_array)
####   (both autochunked, overlap greater)  : join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,*,3]),right_array)
--igdata "join(repart(left_array,<val:double>[i=0:9,*,0, j=0:15,5,3]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,3,0, j=0:15,*,3]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,*,0, j=0:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,5,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,3,3, j=0:15,*,3]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,*,3]),right_array)"
### alter the overlap of the second dimension
####   (first autochunked, smaller overlap) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,1]),right_array)
####   (second autochunked, smaller overlap): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,1]),right_array)
####   (both autochunked, smaller overlap)  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,1]),right_array)
####   (first autochunked, larger overlap) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,4]),right_array)
####   (second autochunked, larger overlap): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,4]),right_array)
####   (both autochunked, larger overlap)  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,4]),right_array)
--igdata "join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,1]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,1]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,1]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,4]),right_array)"
### alter the overlap of the both dimension
####   (first autochunked, smaller overlap, smaller) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,1]),right_array)
####   (second autochunked, smaller overlap, smaller): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,1]),right_array)
####   (both autochunked, smaller overlap, smaller )  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,1]),right_array)
####   (first autochunked, smaller overlap, larger) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,4]),right_array)
####   (second autochunked, smaller overlap, larger): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,4]),right_array)
####   (both autochunked, smaller overlap, larger)  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,4]),right_array)
####   (first autochunked, larger overlap, smaller) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,1]),right_array)
####   (second autochunked, larger overlap, smaller): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,1]),right_array)
####   (both autochunked, larger overlap, smaller )  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,1]),right_array)
####   (first autochunked, larger overlap, larger) : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,5,4]),right_array)
####   (second autochunked, larger overlap, larger): join(repart(left_array,<val:double>[i=0:9,3,2, j=0:15,*,4]),right_array)
####   (both autochunked, larger overlap, larger)  : join(repart(left_array,<val:double>[i=0:9,*,2, j=0:15,*,4]),right_array)
--igdata "join(repart(left_array,<val:double>[i=0:9,*,1, j=0:15,5,1]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,3,1, j=0:15,*,1]),right_array)"
--igdata "join(repart(left_array,<val:double>[i=0:9,*,1, j=0:15,*,1]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,1, j=0:15,5,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,3,1, j=0:15,*,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,1, j=0:15,*,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,5,1]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,3,3, j=0:15,*,1]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,*,1]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,5,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,3,3, j=0:15,*,4]),right_array)"
--error --code scidb::SCIDB_SE_OPERATOR::SCIDB_LE_BAD_EXPLICIT_REPART "join(repart(left_array,<val:double>[i=0:9,*,3, j=0:15,*,4]),right_array)"

--stop-query-logging

--cleanup
remove(left_array)
remove(right_array)
remove(R_L)
remove(L_R)
remove(rL_R)


#  LocalWords:  iquery igdata aq afl IQUERY sed TESTDIR physplan scidb SCIDB
#  LocalWords:  startMin endMax chunkInterval chunkOverlap
#  LocalWords:  requiresRedimensionOrRepartition
#  LocalWords:  PhysicalOperator PhysicalJoin
