# Formerly a test of csv2scidb, now a test to ensure that the built-in CSV loader can do all the same things.
# Interestingly, in nearly every case the complicated csv2scidb options are information just not needed
# by the in-engine CSV load code.

--setup
--start-query-logging

CREATE array Raw_CSVLoad_1 < symbl : string, time : string, price : double, qry : int64 > [ Offset=0:*,10,0 ]

CREATE array Raw_CSVLoad_2 < tax_id : int32, gene_id : int64, go_id : string, evidence : string, qualifier : int32 NULL, term : string, pubmed_id : int32 NULL, category : string > [ Offset=0:*,10,0 ] 

CREATE array Raw_CSVLoad_3 < Probe_ID : string, Platform_ID : string, Entrez_Gene_ID : int32, Symbol   : string, Synonyms : string, Description : string, TaxOn_ID : int32, Count_Gene  : int32, Count_RefSeq  : int32, Unique_to_Gene : bool, Unique_to_Genome : bool, Unique_to_RefSeq : bool > [ Line=0:*,10,0]

CREATE ARRAY Raw_CSVLoad_4 < Probe_ID : string, Platform_ID : string, Entrez_Gene_ID : int32, Symbol   : string, Synonyms : string, Description : string, TaxOn_ID : int32, Count_Gene  : int32, Count_RefSeq  : int32, Unique_to_Gene : bool, Unique_to_Genome : bool, Unique_to_RefSeq : bool > [ Line ]

CREATE ARRAY Raw_CSVLoad_5 < attr_1 : int64 > [ I=0:*,4,0 ]

CREATE ARRAY Raw_CSVLoad_6 < attr_1 : int64 > [ I=0:*,4,0 ]

CREATE ARRAY Raw_CSVLoad_7 < attr_1 : string > [ I=0:*,4,0 ]

CREATE ARRAY Raw_CSVLoad_8 < attr_2 : string > [ I=0:*,4,0 ]

--test

--shell --store --command " sed 1d ${TEST_DATA_DIR}/csv2scidb_1.csv > /tmp/csv2scidb_test_1.load " 

load ( Raw_CSVLoad_1, '/tmp/csv2scidb_test_1.load', -2, 'csv' )

--shell --command " sed 1d ${TEST_DATA_DIR}/csv2scidb_2.csv > /tmp/csv2scidb_test_2.load "

load ( Raw_CSVLoad_2, '/tmp/csv2scidb_test_2.load', -2, 'csv:p' )

--shell --command " sed 1d ${TEST_DATA_DIR}/csv2scidb_3.csv > /tmp/csv2scidb_test_3.load "

load ( Raw_CSVLoad_3, '/tmp/csv2scidb_test_3.load', -2, 'csv' )

# without chunk size specified... see #1560

--shell --command " sed 1d ${TEST_DATA_DIR}/csv2scidb_3.csv > /tmp/csv2scidb_test_4.load "

--start-igdata

load ( Raw_CSVLoad_4, '/tmp/csv2scidb_test_4.load', -2, 'csv' )

--stop-igdata

subarray (Raw_CSVLoad_4, 0,100)

show ( Raw_CSVLoad_4 )

# empty lines in the input file - see #2134
# [... which is a wrong input file and should be fixed with "sed '/^[ \t]*$/d'".  --mjl]

--shell --command " cp ${TEST_DATA_DIR}/csv2scidb_5.csv /tmp/csv2scidb_test_5.load "

load ( Raw_CSVLoad_5, '/tmp/csv2scidb_test_5.load', -2, 'csv' )

--shell --command " cp ${TEST_DATA_DIR}/csv2scidb_5.csv /tmp/csv2scidb_test_6.load "

load ( Raw_CSVLoad_6, '/tmp/csv2scidb_test_6.load', -2, 'csv' )

--shell --command " cp ${TEST_DATA_DIR}/csv2scidb_7.csv /tmp/csv2scidb_test_7.load "

load ( Raw_CSVLoad_7, '/tmp/csv2scidb_test_7.load', -2, 'csv' )

--shell --command " cp ${TEST_DATA_DIR}/csv2scidb_7.csv /tmp/csv2scidb_test_8.load "

load ( Raw_CSVLoad_8, '/tmp/csv2scidb_test_8.load', -2, 'csv' )

--cleanup

remove ( Raw_CSVLoad_1 )

remove ( Raw_CSVLoad_2 )

remove ( Raw_CSVLoad_3 )

remove ( Raw_CSVLoad_4 )

remove ( Raw_CSVLoad_5 )

remove ( Raw_CSVLoad_6 )

remove ( Raw_CSVLoad_7 )

remove ( Raw_CSVLoad_8 )

--shell --store --command "rm -rf /tmp/csv2scidb_test_1.load " 
--shell --store --command "rm -rf /tmp/csv2scidb_test_2.load "
--shell --store --command "rm -rf /tmp/csv2scidb_test_3.load "
--shell --store --command "rm -rf /tmp/csv2scidb_test_4.load "
--shell --store --command "rm -rf /tmp/csv2scidb_test_5.load " 
--shell --store --command "rm -rf /tmp/csv2scidb_test_6.load "
--shell --store --command "rm -rf /tmp/csv2scidb_test_7.load "
--shell --store --command "rm -rf /tmp/csv2scidb_test_8.load "

--stop-query-logging
