................................Start Testing TypeLibrary and Type Class handling
List of Types
	binary
	bool
	char
	datetime
	datetimetz
	double
	float
	indicator
	int16
	int32
	int64
	int8
	string
	uint16
	uint32
	uint64
	uint8
	void
End Testing TypeLibrary and Type Class handling
.Start Testing TypeLibrary and Type Class handling
End Testing TypeLibrary and Type Class handling
......................
.
Options{name="A",limit=unlimited,pagesize=1KiB,parent="root",finalizing=1,recycling=0,resetting=0,debugging=0,threading=0}
Options{name="B",limit=unlimited,pagesize=64KiB,parent="root",finalizing=1,recycling=0,resetting=1,debugging=0,threading=1}
Options{name="C",limit=10KiB,pagesize=64KiB,parent="root",finalizing=1,recycling=0,resetting=0,debugging=0,threading=1}
Options{name="D",limit=unlimited,pagesize=64KiB,parent="root",finalizing=1,recycling=0,resetting=1,debugging=0,threading=1}
Options{name="E",limit=unlimited,pagesize=64MiB,parent="root",finalizing=1,recycling=1,resetting=1,debugging=0,threading=1}
Options{name="F",limit=1.3e+02MiB,pagesize=64MiB,parent="root",finalizing=1,recycling=1,resetting=1,debugging=0,threading=1}
.
.
.
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/",available=unlimited,allocated=0B,peakusage=4.6e+02KiB,allocations=0,features="FCT"}
.
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/limited 1",available=1GiB,allocated=0B,peakusage=4.6e+02KiB,allocations=0,features="FCT"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/limited 2",available=1GiB,allocated=0B,peakusage=4.6e+02KiB,allocations=0,features="FCDT"}
.
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/scoped 1",available=unlimited,allocated=1MiB,peakusage=1MiB,allocations=16,pagesize=64KiB,pending=16,features="FST"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/scoped 2",available=unlimited,allocated=2.2MiB,peakusage=2.2MiB,allocations=52946,pagesize=24B,pending=52946,features="FST"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/scoped 3",available=unlimited,allocated=2.2MiB,peakusage=2.2MiB,allocations=52946,pagesize=24B,pending=52946,features="FSDT"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/scoped 4",available=unlimited,allocated=1.4MiB,peakusage=1.4MiB,allocations=15692,pagesize=96B,pending=15692,features="FS"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/scoped 5",available=unlimited,allocated=1.4MiB,peakusage=1.4MiB,allocations=15692,pagesize=96B,pending=15692,features="FSD"}
.
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/lea 1",available=unlimited,allocated=0B,peakusage=1.4MiB,allocations=0,pagesize=0B,features="FCST"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/lea 2",available=unlimited,allocated=0B,peakusage=1.1MiB,allocations=0,pagesize=96B,features="FCST"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/lea 3",available=unlimited,allocated=0B,peakusage=8e+02KiB,allocations=0,pagesize=10KiB,features="FCST"}
{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{A,B}{B,A}{B,A}{65,66}{65,66}{65,66}{65,66}{65,66}{65,66}{66,65}{66,65}{name="root/lea 4",available=unlimited,allocated=0B,peakusage=64MiB,allocations=0,pagesize=64MiB,features="FCST"}
.
78: extensive testing shows that allocate_shared() is AOK.
.
.
test string concatenation: ss
.
.
.
An Example ==================================================

update("PhysicalFoo.cpp checkpoint",{name="root/Foo",available=1GiB,allocated=0B,peakusage=0B,allocations=0,features="FC"})
=============================================================



OK (68 tests)



